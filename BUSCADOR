<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tabla filtrable 7 columnas (final)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root {
      --bg:#f5f5f5; --ink:#222; --muted:#666; --line:#ddd; --head:#333; --headInk:#fff;
      --active:#0b6efd;
    }
    body { font-family: system-ui, Arial, sans-serif; margin: 20px; color: var(--ink); background: var(--bg); }
    h2 { margin: 0 0 8px }
    .meta { font-size: 12px; color: var(--muted); margin: 6px 0 14px; }
    table { width: 100%; border-collapse: collapse; background: #fff; box-shadow: 0 2px 10px rgba(0,0,0,.06); }
    th, td { padding: 8px 10px; border: 1px solid var(--line); text-align: left; vertical-align: top; }
    thead th { background: var(--head); color: var(--headInk); position: sticky; top: 42px; z-index: 1; }
    thead tr:first-child th { position: sticky; top: 0; z-index: 2; background: #fff; color: var(--ink); }
    thead input {
      width: 100%; box-sizing: border-box; padding: 6px 8px;
      border: 1px solid var(--line); border-radius: 6px; outline: none;
      transition: box-shadow .15s, border-color .15s, color .15s, font-weight .15s;
    }
    thead input:focus { border-color: var(--active); box-shadow: 0 0 0 3px rgba(11,110,253,.15); }
    thead input.active { color: var(--active); font-weight: 700; }
    tbody tr:nth-child(even) td { background: #fafafa; }
    mark { background: none; color: var(--active); font-weight: 700; }
    .status { font-size: 12px; color: var(--muted); margin-top: 10px; }
    .actions { margin-bottom: 10px; }
    .actions button {
      padding: 6px 10px; border: 1px solid var(--active); background: var(--active);
      color: #fff; border-radius: 6px; cursor: pointer; font-size: 14px;
      transition: background .2s;
    }
    .actions button:hover { background: #094db1; }
  </style>
</head>
<body>
  <h2>Tabla filtrable encadenada 7 columnas</h2>
  <div class="meta">
    ‚ûï Usa <b>+palabra</b> para forzar coincidencia, <b>-palabra</b> para excluir.  
    üìä Los desplegables muestran <code>valor (n)</code> con el n√∫mero de apariciones en el contexto actual.  
    üîÅ Se actualizan din√°micamente seg√∫n los filtros activos.
  </div>

  <div class="actions">
    <button onclick="clearAllFilters()">üßº Borrar todos los filtros</button>
  </div>

  <table>
    <thead>
      <tr>
        <th><input id="f0" list="dl0" placeholder="Fichero" oninput="handleType(0,this)"><datalist id="dl0"></datalist></th>
        <th><input id="f1" list="dl1" placeholder="C√≥digo" oninput="handleType(1,this)"><datalist id="dl1"></datalist></th>
        <th><input id="f2" list="dl2" placeholder="Formato" oninput="handleType(2,this)"><datalist id="dl2"></datalist></th>
        <th><input id="f3" list="dl3" placeholder="Descripci√≥n" oninput="handleType(3,this)"><datalist id="dl3"></datalist></th>
        <th><input id="f4" list="dl4" placeholder="Cap√≠tulo" oninput="handleType(4,this)"><datalist id="dl4"></datalist></th>
        <th><input id="f5" list="dl5" placeholder="Descripci√≥n 2" oninput="handleType(5,this)"><datalist id="dl5"></datalist></th>
        <th><input id="f6" list="dl6" placeholder="C EURO" oninput="handleType(6,this)"><datalist id="dl6"></datalist></th>
      </tr>
      <tr>
        <th>Fichero</th><th>C√≥digo</th><th>Formato</th><th>Descripci√≥n</th>
        <th>Cap√≠tulo</th><th>Descripci√≥n 2</th><th>C EURO</th>
      </tr>
    </thead>
    <tbody id="tbody"></tbody>
  </table>

  <div class="status" id="status"></div>

  <script>
    // üîΩ Sustituye por tus datos reales (7 columnas)
    const data = [
      ["FICH001","12345","TXT","3 puertas","F","desc X","C1 100‚Ç¨"],
      ["FICH002","67890","TXT","3 puertas","F","desc X","C1 200‚Ç¨"],
      ["FICH003","13579","TXT","3 puertas","G","desc Y","C1 300‚Ç¨"],
      ["FICH004","24680","TXT","3 puertas","H","desc Z","C1 400‚Ç¨"],
      ["FICH005","11223","TXT","7 puertas","A","desc A","C2 500‚Ç¨"],
      ["FICH006","44556","TXT","7 puertas","A","desc B","C2 600‚Ç¨"],
      ["FICH007","99887","TXT","7 puertas","B","desc C","C2 700‚Ç¨"],
    ];

    const MAX_SUGGESTIONS = 500;
    const DEFAULT_RENDER_LIMIT = 500;
    const inputs = [...document.querySelectorAll('thead input')];
    const filters = Array(7).fill('');
    const tbody = document.getElementById('tbody');
    const statusEl = document.getElementById('status');

    function rowMatches(row, ignoreCol = -1){
      for (let i=0;i<7;i++){
        if (i===ignoreCol) continue;
        const f = filters[i];
        if (!f) continue;
        const parts = f.split(/\s+/).filter(Boolean);
        const cell = String(row[i]).toLowerCase();
        for (const p of parts) {
          if (p.startsWith('+')) { if (!cell.includes(p.slice(1))) return false; }
          else if (p.startsWith('-')) { if (cell.includes(p.slice(1))) return false; }
          else { if (!cell.includes(p)) return false; }
        }
      }
      return true;
    }

    function highlightText(text, colIndex){
      const f = filters[colIndex];
      if (!f) return text;
      let result = text;
      const parts = f.split(/\s+/).filter(Boolean).filter(p => !p.startsWith('-'));
      for (const p of parts) {
        const term = p.startsWith('+') ? p.slice(1) : p;
        if (!term) continue;
        const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        result = result.replace(regex, '<mark>$1</mark>');
      }
      return result;
    }

    function renderTable(){
      const matchedRows = [];
      for (const row of data) if (rowMatches(row)) matchedRows.push(row);
      const matched = matchedRows.length;
      const activeFilters = filters.some(f => f.trim() !== '');
      const renderLimit = (activeFilters && matched > DEFAULT_RENDER_LIMIT) ? matched : DEFAULT_RENDER_LIMIT;

      const frag = document.createDocumentFragment();
      for (const row of matchedRows.slice(0, renderLimit)) {
        const tr = document.createElement('tr');
        for (let c=0;c<7;c++){
          const td = document.createElement('td');
          td.innerHTML = highlightText(String(row[c]), c);
          tr.appendChild(td);
        }
        frag.appendChild(tr);
      }

      tbody.innerHTML = '';
      tbody.appendChild(frag);
      statusEl.textContent = `Coincidencias: ${matched.toLocaleString()} ‚Äî Mostrando: ${Math.min(matched, renderLimit).toLocaleString()}${matched>renderLimit?' (limitado por rendimiento)':''}`;
    }

    function updateDatalist(colIndex, typed){
      const dl = document.getElementById('dl'+colIndex);
      dl.innerHTML = '';

      // Contar repeticiones por valor en el subconjunto filtrado actual
      const counts = new Map();
      for (const row of data){
        if (rowMatches(row, colIndex)){
          const val = String(row[colIndex]);
          counts.set(val, (counts.get(val) || 0) + 1);
        }
      }

      // Orden alfab√©tico (puedes cambiar a ordenar por n si prefieres)
      const options = Array.from(counts.entries()).sort((a,b)=>a[0].localeCompare(b[0]));
      const t = (typed||'').toLowerCase();
      let count = 0;
      for (const [val, n] of options){
        if (!typed || val.toLowerCase().includes(t)){
          const opt = document.createElement('option');
          opt.value = val;
          opt.label = `${val} (${n})`;
          dl.appendChild(opt);
          if (++count >= MAX_SUGGESTIONS) break;
        }
      }
    }

    function updateAllDatalists(except = -1){
      for (let i=0;i<7;i++) if (i!==except) updateDatalist(i, inputs[i].value);
    }

    function handleType(colIndex, el){
      const val = (el.value || '').trim();
      filters[colIndex] = val.toLowerCase();
      if (val) el.classList.add('active'); else el.classList.remove('active');
      updateDatalist(colIndex, val);
      updateAllDatalists(colIndex);
      renderTable();
    }

    function clearAllFilters(){
      for (let i=0;i<7;i++){
        filters[i]=''; inputs[i].value=''; inputs[i].classList.remove('active');
        document.getElementById('dl'+i).innerHTML='';
      }
      renderTable();
      updateAllDatalists();
    }

    // Inicial
    renderTable();
    updateAllDatalists();

    // üëá Hack: abrir desplegable al enfocar inputs vac√≠os
    inputs.forEach(inp => {
      inp.addEventListener('focus', () => {
        if (inp.value === '') {
          inp.setAttribute('placeholder', ' ');
          setTimeout(()=>inp.setAttribute('placeholder',''),0);
        }
      });
    });
  </script>
</body>
</html>