<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tabla 7 columnas con autocompletar por columna</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root { --bg:#f5f5f5; --ink:#222; --muted:#666; --line:#ddd; --head:#333; --headInk:#fff; }
    body { font-family: system-ui, Arial, sans-serif; margin: 20px; color: var(--ink); background: var(--bg); }
    h2 { margin-top: 0 }
    table { width: 100%; border-collapse: collapse; background: #fff; box-shadow: 0 2px 10px rgba(0,0,0,.06); }
    th, td { padding: 8px 10px; border: 1px solid var(--line); text-align: left; }
    thead th { background: var(--head); color: var(--headInk); position: sticky; top: 38px; z-index: 1; }
    thead tr:first-child th { position: sticky; top: 0; z-index: 2; background: #fff; color: var(--ink); }
    thead input { width: 100%; box-sizing: border-box; padding: 6px 8px; border: 1px solid var(--line); border-radius: 6px; }
    tbody tr:nth-child(even) td { background: #fafafa; }
    .meta { font-size: 12px; color: var(--muted); margin: 8px 0 16px; }
  </style>
</head>
<body>
  <h2>Tabla filtrable con escritura + sugerencias por columna</h2>
  <div class="meta">Escribe en cualquier campo para ver sugerencias (m√°x. 50). Los filtros se combinan.</div>

  <table>
    <thead>
      <tr>
        <th>
          <input id="f0" list="dl0" placeholder="Marca" oninput="handleType(0,this.value)">
          <datalist id="dl0"></datalist>
        </th>
        <th>
          <input id="f1" list="dl1" placeholder="Modelo" oninput="handleType(1,this.value)">
          <datalist id="dl1"></datalist>
        </th>
        <th>
          <input id="f2" list="dl2" placeholder="Caballos" oninput="handleType(2,this.value)">
          <datalist id="dl2"></datalist>
        </th>
        <th>
          <input id="f3" list="dl3" placeholder="Potencia (kW)" oninput="handleType(3,this.value)">
          <datalist id="dl3"></datalist>
        </th>
        <th>
          <input id="f4" list="dl4" placeholder="A√±o" oninput="handleType(4,this.value)">
          <datalist id="dl4"></datalist>
        </th>
        <th>
          <input id="f5" list="dl5" placeholder="Pa√≠s" oninput="handleType(5,this.value)">
          <datalist id="dl5"></datalist>
        </th>
        <th>
          <input id="f6" list="dl6" placeholder="Descripci√≥n" oninput="handleType(6,this.value)">
          <datalist id="dl6"></datalist>
        </th>
      </tr>
      <tr>
        <th>Marca</th><th>Modelo</th><th>Caballos</th><th>Potencia (kW)</th>
        <th>A√±o</th><th>Pa√≠s</th><th>Descripci√≥n</th>
      </tr>
    </thead>
    <tbody id="tbody"></tbody>
  </table>

  <div class="meta" id="status"></div>

  <script>
    // üîΩ PEGA AQU√ç TUS 23.000 FILAS. Cada fila = [Marca, Modelo, Caballos, kW, A√±o, Pa√≠s, Descripci√≥n]
    const data = [
      ["Audi","A3 35 TFSI","150","110","2020","Alemania","Compacto premium eficiente, ideal para ciudad"],
      ["BMW","320i","184","135","2019","Alemania","Berlina equilibrada, buen consumo en autopista"],
      ["Mercedes","C200","163","120","2021","Alemania","Confort alto y ayudas a la conducci√≥n"],
      ["Volkswagen","Golf 1.5 TSI","130","96","2018","Alemania","Cl√°sico compacto con buen maletero"],
      ["Ford","Focus 1.0 EcoBoost","125","92","2022","EE. UU.","Din√°mico, buen chasis y conectividad"],
      ["Renault","M√©gane TCe","140","103","2020","Francia","Relaci√≥n calidad-precio muy s√≥lida"],
      ["Peugeot","308 PureTech","130","96","2019","Francia","Interior moderno i-Cockpit"],
      ["Toyota","Corolla Hybrid","122","90","2021","Jap√≥n","H√≠brido fiable, consumo muy bajo"],
      ["SEAT","Le√≥n 1.5 TSI","150","110","2020","Espa√±a","Equilibrio entre deportividad y confort"],
      ["Honda","Civic VTEC","182","134","2019","Jap√≥n","Motor el√°stico y buen espacio trasero"],
      ["Opel","Astra 1.2","145","107","2021","Alemania","Compacto c√≥modo para largos viajes"],
      ["Fiat","Tipo 1.4","95","70","2018","Italia","Econ√≥mico en mantenimiento y seguro"],
      ["≈†koda","Octavia 1.5 TSI","150","110","2020","Chequia","Muy espacioso, maletero enorme"],
      ["Hyundai","i30 1.0 T-GDi","120","88","2022","Corea","Garant√≠a larga y equipamiento completo"],
      ["Kia","Ceed 1.4 T-GDi","140","103","2021","Corea","Buena dotaci√≥n tecnol√≥gica de serie"],
      ["Citro√´n","C4 PureTech","130","96","2020","Francia","Suspensi√≥n confortable, dise√±o distintivo"],
      ["Volvo","S60 T4","190","140","2019","Suecia","Seguridad l√≠der y buen aislamiento"],
      ["Mini","Cooper 1.5","136","100","2021","Reino Unido","Estilo ic√≥nico y manejo √°gil"],
      ["Alfa Romeo","Giulia 2.0","200","147","2018","Italia","Tracci√≥n trasera y tacto deportivo"],
      ["Tesla","Model 3 SR+","300","220","2022","EE. UU.","El√©ctrico con gran aceleraci√≥n y OTA"],
      ["Mazda","3 Skyactiv-G","150","110","2020","Jap√≥n","Atmosf√©rico suave, acabados premium"],
      ["Nissan","Qashqai 1.3","140","103","2021","Jap√≥n","SUV compacto, asientos c√≥modos"],
      ["Dacia","Duster TCe","130","96","2022","Ruman√≠a","SUV asequible, buen 4x2"],
      ["Subaru","Impreza","156","115","2019","Jap√≥n","Tracci√≥n integral y seguridad activa"],
      ["Jaguar","XE 2.0T","250","184","2018","Reino Unido","Berlina deportiva, chasis preciso"],
      ["Porsche","Macan 2.0T","265","195","2021","Alemania","SUV premium con din√°mica excelente"],
      ["Cupra","Formentor 1.5","150","110","2022","Espa√±a","Crossover deportivo con buena puesta a punto"],
      ["Peugeot","3008 Hybrid","225","165","2021","Francia","H√≠brido enchufable, interior top"],
      ["Renault","Clio TCe","100","74","2020","Francia","Urbano con buen equipamiento de seguridad"],
      ["Hyundai","Tucson 1.6","150","110","2021","Corea","SUV con dise√±o llamativo y mucho equipamiento"]
    ];

    // ‚öôÔ∏è Config
    const MAX_SUGGESTIONS = 50;   // l√≠mite de opciones en cada datalist
    const MAX_RENDER = 500;       // pinta como m√°ximo (para fluidez con 23k)

    // Estado
    const filters = ["","","","","","",""];
    const tbody = document.getElementById('tbody');
    const statusEl = document.getElementById('status');

    // Precalcular √∫nicos por columna (para sugerencias r√°pidas)
    const uniques = Array.from({length:7}, ()=> new Set());
    for (const row of data) for (let c=0;c<7;c++) uniques[c].add(String(row[c]));
    const uniqueLists = uniques.map(s => Array.from(s).sort());

    // Debounce simple
    let tId;
    function debounce(fn, ms=120){ clearTimeout(tId); tId=setTimeout(fn, ms); }

    // Al teclear: actualiza sugerencias de esa columna + aplica filtros
    function handleType(colIndex, value){
      filters[colIndex] = (value||"").toLowerCase();
      updateDatalist(colIndex, value);
      debounce(renderTable);
    }

    function updateDatalist(colIndex, typed){
      const listId = 'dl'+colIndex;
      const dl = document.getElementById(listId);
      dl.innerHTML = '';
      if (!typed) return; // no saturar opciones si el campo est√° vac√≠o
      const t = typed.toLowerCase();
      let count = 0;
      for (const v of uniqueLists[colIndex]) {
        if (v.toLowerCase().includes(t)) {
          const opt = document.createElement('option');
          opt.value = v;
          dl.appendChild(opt);
          if (++count >= MAX_SUGGESTIONS) break;
        }
      }
    }

    function renderTable(){
      const frag = document.createDocumentFragment();
      let shown = 0, matched = 0;
      outer:
      for (const row of data) {
        for (let i=0;i<7;i++){
          const f = filters[i];
          if (f && !String(row[i]).toLowerCase().includes(f)) continue outer;
        }
        matched++;
        if (shown < MAX_RENDER){
          const tr = document.createElement('tr');
          for (const cell of row){
            const td = document.createElement('td');
            td.textContent = cell;
            tr.appendChild(td);
          }
          frag.appendChild(tr);
          shown++;
        }
      }
      tbody.innerHTML = '';
      tbody.appendChild(frag);
      statusEl.textContent = `Coincidencias: ${matched.toLocaleString()}  ‚Äî  Mostrando: ${shown.toLocaleString()}${matched>shown?' (vista limitada para fluidez)':''}`;
    }

    // Inicial
    renderTable();

    // Si el usuario selecciona una sugerencia desde el desplegable (evento change)
    for (let i=0;i<7;i++){
      const input = document.getElementById('f'+i);
      input.addEventListener('change', e => { handleType(i, e.target.value); });
    }
  </script>
</body>
</html>
