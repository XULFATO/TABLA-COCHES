<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tabla 7 columnas con filtros y resaltado</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root {
      --bg:#f5f5f5; --ink:#222; --muted:#666; --line:#ddd; --head:#333; --headInk:#fff;
      --active:#0b6efd;         /* color del filtro activo */
      --mark-bg:#fff3cd;        /* fondo del texto marcado en celdas */
      --mark-ink:#7a5a00;       /* color del texto marcado */
    }
    body { font-family: system-ui, Arial, sans-serif; margin: 20px; color: var(--ink); background: var(--bg); }
    h2 { margin: 0 0 8px }
    .meta { font-size: 12px; color: var(--muted); margin: 6px 0 14px; }
    table { width: 100%; border-collapse: collapse; background: #fff; box-shadow: 0 2px 10px rgba(0,0,0,.06); }
    th, td { padding: 8px 10px; border: 1px solid var(--line); text-align: left; vertical-align: top; }
    thead th { background: var(--head); color: var(--headInk); position: sticky; top: 42px; z-index: 1; }
    thead tr:first-child th { position: sticky; top: 0; z-index: 2; background: #fff; color: var(--ink); }
    thead input {
      width: 100%; box-sizing: border-box; padding: 6px 8px;
      border: 1px solid var(--line); border-radius: 6px; outline: none;
      transition: box-shadow .15s, border-color .15s, color .15s, font-weight .15s;
    }
    thead input:focus { border-color: var(--active); box-shadow: 0 0 0 3px rgba(11,110,253,.15); }
    /* 👉 filtro activo: negrita + color */
    thead input.active { color: var(--active); font-weight: 700; }

    tbody tr:nth-child(even) td { background: #fafafa; }
    /* 👉 resaltado dentro de celdas */
    mark {
      background: var(--mark-bg);
      color: var(--mark-ink);
      padding: 0 .15em;
      border-radius: 3px;
    }
    .status { font-size: 12px; color: var(--muted); margin-top: 10px; }
  </style>
</head>
<body>
  <h2>Tabla filtrable con escritura + desplegable y resaltado</h2>
  <div class="meta">Escribe para ver sugerencias (máx. 50 por columna). Los filtros se combinan.</div>

  <table>
    <thead>
      <tr>
        <th>
          <input id="f0" list="dl0" placeholder="Marca" oninput="handleType(0,this)">
          <datalist id="dl0"></datalist>
        </th>
        <th>
          <input id="f1" list="dl1" placeholder="Modelo" oninput="handleType(1,this)">
          <datalist id="dl1"></datalist>
        </th>
        <th>
          <input id="f2" list="dl2" placeholder="Caballos" oninput="handleType(2,this)">
          <datalist id="dl2"></datalist>
        </th>
        <th>
          <input id="f3" list="dl3" placeholder="Potencia (kW)" oninput="handleType(3,this)">
          <datalist id="dl3"></datalist>
        </th>
        <th>
          <input id="f4" list="dl4" placeholder="Año" oninput="handleType(4,this)">
          <datalist id="dl4"></datalist>
        </th>
        <th>
          <input id="f5" list="dl5" placeholder="País" oninput="handleType(5,this)">
          <datalist id="dl5"></datalist>
        </th>
        <th>
          <input id="f6" list="dl6" placeholder="Descripción" oninput="handleType(6,this)">
          <datalist id="dl6"></datalist>
        </th>
      </tr>
      <tr>
        <th>Marca</th><th>Modelo</th><th>Caballos</th><th>Potencia (kW)</th>
        <th>Año</th><th>País</th><th>Descripción</th>
      </tr>
    </thead>
    <tbody id="tbody"></tbody>
  </table>

  <div class="status" id="status"></div>

  <script>
    /* ==== PEGA AQUÍ TUS 23.000 FILAS ====
       Cada fila: [Marca, Modelo, Caballos, kW, Año, País, Descripción] */
    const data = [
      ["Audi","A3 35 TFSI","150","110","2020","Alemania","Compacto premium eficiente, ideal para ciudad"],
      ["BMW","320i","184","135","2019","Alemania","Berlina equilibrada, buen consumo en autopista"],
      ["Mercedes","C200","163","120","2021","Alemania","Confort alto y ayudas a la conducción"],
      ["Volkswagen","Golf 1.5 TSI","130","96","2018","Alemania","Clásico compacto con buen maletero"],
      ["Ford","Focus 1.0 EcoBoost","125","92","2022","EE. UU.","Dinámico, buen chasis y conectividad"],
      ["Renault","Mégane TCe","140","103","2020","Francia","Relación calidad-precio muy sólida"],
      ["Peugeot","308 PureTech","130","96","2019","Francia","Interior moderno i-Cockpit"],
      ["Toyota","Corolla Hybrid","122","90","2021","Japón","Híbrido fiable, consumo muy bajo"],
      ["SEAT","León 1.5 TSI","150","110","2020","España","Equilibrio entre deportividad y confort"],
      ["Honda","Civic VTEC","182","134","2019","Japón","Motor elástico y buen espacio trasero"],
      ["Opel","Astra 1.2","145","107","2021","Alemania","Compacto cómodo para largos viajes"],
      ["Fiat","Tipo 1.4","95","70","2018","Italia","Económico en mantenimiento y seguro"],
      ["Škoda","Octavia 1.5 TSI","150","110","2020","Chequia","Muy espacioso, maletero enorme"],
      ["Hyundai","i30 1.0 T-GDi","120","88","2022","Corea","Garantía larga y equipamiento completo"],
      ["Kia","Ceed 1.4 T-GDi","140","103","2021","Corea","Buena dotación tecnológica de serie"],
      ["Citroën","C4 PureTech","130","96","2020","Francia","Suspensión confortable, diseño distintivo"],
      ["Volvo","S60 T4","190","140","2019","Suecia","Seguridad líder y buen aislamiento"],
      ["Mini","Cooper 1.5","136","100","2021","Reino Unido","Estilo icónico y manejo ágil"],
      ["Alfa Romeo","Giulia 2.0","200","147","2018","Italia","Tracción trasera y tacto deportivo"],
      ["Tesla","Model 3 SR+","300","220","2022","EE. UU.","Eléctrico con gran aceleración y OTA"],
      ["Mazda","3 Skyactiv-G","150","110","2020","Japón","Atmosférico suave, acabados premium"],
      ["Nissan","Qashqai 1.3","140","103","2021","Japón","SUV compacto, asientos cómodos"],
      ["Dacia","Duster TCe","130","96","2022","Rumanía","SUV asequible, buen 4x2"],
      ["Subaru","Impreza","156","115","2019","Japón","Tracción integral y seguridad activa"],
      ["Jaguar","XE 2.0T","250","184","2018","Reino Unido","Berlina deportiva, chasis preciso"],
      ["Porsche","Macan 2.0T","265","195","2021","Alemania","SUV premium con dinámica excelente"],
      ["Cupra","Formentor 1.5","150","110","2022","España","Crossover deportivo con buena puesta a punto"],
      ["Peugeot","3008 Hybrid","225","165","2021","Francia","Híbrido enchufable, interior top"],
      ["Renault","Clio TCe","100","74","2020","Francia","Urbano con buen equipamiento de seguridad"],
      ["Hyundai","Tucson 1.6","150","110","2021","Corea","SUV con diseño llamativo y mucho equipamiento"]
    ];

    // ⚙️ Configurables
    const MAX_SUGGESTIONS = 50; // opciones máx por datalist
    const MAX_RENDER = 500;     // filas máx que se pintan (fluidez)

    // Estado
    const inputs = [...document.querySelectorAll('thead input')];
    const filters = Array(7).fill('');
    const tbody = document.getElementById('tbody');
    const statusEl = document.getElementById('status');

    // Uniques por columna para sugerencias
    const uniques = Array.from({length:7}, ()=> new Set());
    for (const row of data) for (let c=0;c<7;c++) uniques[c].add(String(row[c]));
    const uniqueLists = uniques.map(s => Array.from(s).sort());

    // Debounce
    let tId;
    const debounce = (fn, ms=120) => { clearTimeout(tId); tId = setTimeout(fn, ms); };

    // Helpers de marcado seguro
    const escapeHtml = (s) => String(s)
      .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
      .replace(/"/g,'&quot;').replace(/'/g,'&#039;');

    const escapeRegex = (s) => s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

    // Devuelve HTML con <mark> alrededor de coincidencias (case-insensitive)
    function highlight(text, needle){
      if (!needle) return escapeHtml(text);
      const re = new RegExp(`(${escapeRegex(needle)})`, 'ig');
      return escapeHtml(text).replace(re, '<mark>$1</mark>');
    }

    function handleType(colIndex, el){
      const val = (el.value || '').trim();
      filters[colIndex] = val.toLowerCase();

      // estilo activo/inactivo del input
      if (val) el.classList.add('active'); else el.classList.remove('active');

      // actualizar sugerencias
      updateDatalist(colIndex, val);

      // pintar
      debounce(renderTable);
    }

    function updateDatalist(colIndex, typed){
      const dl = document.getElementById('dl'+colIndex);
      dl.innerHTML = '';
      if (!typed) return;
      const t = typed.toLowerCase();
      let count = 0;
      for (const v of uniqueLists[colIndex]) {
        if (v.toLowerCase().includes(t)) {
          const opt = document.createElement('option');
          opt.value = v;
          dl.appendChild(opt);
          if (++count >= MAX_SUGGESTIONS) break;
        }
      }
    }

    function rowMatches(row){
      for (let i=0;i<7;i++){
        const f = filters[i];
        if (f && !String(row[i]).toLowerCase().includes(f)) return false;
      }
      return true;
    }

    function renderTable(){
      const frag = document.createDocumentFragment();
      let shown = 0, matched = 0;
      for (const row of data) {
        if (!rowMatches(row)) continue;
        matched++;
        if (shown < MAX_RENDER){
          const tr = document.createElement('tr');
          for (let c=0;c<7;c++){
            const td = document.createElement('td');
            td.innerHTML = highlight(row[c], filters[c]);
            tr.appendChild(td);
          }
          frag.appendChild(tr);
          shown++;
        }
      }
      tbody.innerHTML = '';
      tbody.appendChild(frag);
      statusEl.textContent = `Coincidencias: ${matched.toLocaleString()} — Mostrando: ${shown.toLocaleString()}${matched>shown?' (limitado para fluidez)':''}`;
    }

    // inicial
    renderTable();

    // también marcar activo cuando seleccionas del datalist (evento change)
    inputs.forEach((inp, i)=>{
      inp.addEventListener('change', e => handleType(i, e.target));
    });
  </script>
</body>
</html>
