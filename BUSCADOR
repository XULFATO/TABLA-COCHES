<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tabla filtrable 7 columnas con reset y datalist din√°mico</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root {
      --bg:#f5f5f5; --ink:#222; --muted:#666; --line:#ddd; --head:#333; --headInk:#fff;
      --active:#0b6efd;
    }
    body { font-family: system-ui, Arial, sans-serif; margin: 20px; color: var(--ink); background: var(--bg); }
    h2 { margin: 0 0 8px }
    .meta { font-size: 12px; color: var(--muted); margin: 6px 0 14px; }
    table { width: 100%; border-collapse: collapse; background: #fff; box-shadow: 0 2px 10px rgba(0,0,0,.06); }
    th, td { padding: 8px 10px; border: 1px solid var(--line); text-align: left; vertical-align: top; }
    thead th { background: var(--head); color: var(--headInk); position: sticky; top: 42px; z-index: 1; }
    thead tr:first-child th { position: sticky; top: 0; z-index: 2; background: #fff; color: var(--ink); }
    thead input {
      width: 100%; box-sizing: border-box; padding: 6px 8px;
      border: 1px solid var(--line); border-radius: 6px; outline: none;
      transition: box-shadow .15s, border-color .15s, color .15s, font-weight .15s;
    }
    thead input:focus { border-color: var(--active); box-shadow: 0 0 0 3px rgba(11,110,253,.15); }
    thead input.active { color: var(--active); font-weight: 700; }
    tbody tr:nth-child(even) td { background: #fafafa; }
    mark { background: none; color: var(--active); font-weight: 700; }
    .status { font-size: 12px; color: var(--muted); margin-top: 10px; }
    .actions { margin-bottom: 10px; }
    .actions button {
      padding: 6px 10px; border: 1px solid var(--active); background: var(--active);
      color: #fff; border-radius: 6px; cursor: pointer; font-size: 14px;
      transition: background .2s;
    }
    .actions button:hover { background: #094db1; }
  </style>
</head>
<body>
  <h2>Tabla filtrable 7 columnas</h2>
  <div class="meta">
    Usa <b>+palabra</b> para forzar coincidencia y <b>-palabra</b> para excluir.  
    Las coincidencias aparecen <mark>resaltadas</mark>.  
    Si hay m√°s de 500 coincidencias con filtros, se muestran todas.
  </div>

  <div class="actions">
    <button onclick="clearAllFilters()">üßº Borrar todos los filtros</button>
  </div>

  <table>
    <thead>
      <tr>
        <th><input id="f0" list="dl0" placeholder="Fichero" oninput="handleType(0,this)"><datalist id="dl0"></datalist></th>
        <th><input id="f1" list="dl1" placeholder="C√≥digo" oninput="handleType(1,this)"><datalist id="dl1"></datalist></th>
        <th><input id="f2" list="dl2" placeholder="Formato" oninput="handleType(2,this)"><datalist id="dl2"></datalist></th>
        <th><input id="f3" list="dl3" placeholder="Descripci√≥n" oninput="handleType(3,this)"><datalist id="dl3"></datalist></th>
        <th><input id="f4" list="dl4" placeholder="Cap√≠tulo" oninput="handleType(4,this)"><datalist id="dl4"></datalist></th>
        <th><input id="f5" list="dl5" placeholder="Descripci√≥n 2" oninput="handleType(5,this)"><datalist id="dl5"></datalist></th>
        <th><input id="f6" list="dl6" placeholder="C EURO" oninput="handleType(6,this)"><datalist id="dl6"></datalist></th>
      </tr>
      <tr>
        <th>Fichero</th><th>C√≥digo</th><th>Formato</th><th>Descripci√≥n</th>
        <th>Cap√≠tulo</th><th>Descripci√≥n 2</th><th>C EURO</th>
      </tr>
    </thead>
    <tbody id="tbody"></tbody>
  </table>

  <div class="status" id="status"></div>

  <script>
    // üîΩ Sustituye por tus 23.000 registros reales
    const data = [
      ["FICH001","12345","TXT","Descripci√≥n de prueba 1","Cap√≠tulo A","Otra descripci√≥n","C1 100‚Ç¨"],
      ["FICH002","67890","PDF","Algo interesante Madrid","Cap√≠tulo B","Texto auxiliar","C2 250‚Ç¨"],
      ["FICH003","13579","CSV","Incluye Alemania","Cap√≠tulo C","M√°s detalles","C3 75‚Ç¨"],
      ["FICH004","24680","XLS","Otro registro de Madrid","Cap√≠tulo D","Descripci√≥n extendida","C4 300‚Ç¨"],
    ];

    const MAX_SUGGESTIONS = 50;
    const DEFAULT_RENDER_LIMIT = 500;

    const inputs = [...document.querySelectorAll('thead input')];
    const filters = Array(7).fill('');
    const tbody = document.getElementById('tbody');
    const statusEl = document.getElementById('status');

    let tId;
    const debounce = (fn, ms=120) => { clearTimeout(tId); tId = setTimeout(fn, ms); };

    function handleType(colIndex, el){
      const val = (el.value || '').trim();
      filters[colIndex] = val.toLowerCase();

      if (val) el.classList.add('active'); else el.classList.remove('active');
      updateDatalist(colIndex, val);
      debounce(renderTable);
    }

    function rowMatches(row, ignoreCol = -1){
      for (let i=0;i<7;i++){
        if (i===ignoreCol) continue;
        const f = filters[i];
        if (!f) continue;
        const parts = f.split(/\s+/).filter(Boolean);
        const cell = String(row[i]).toLowerCase();
        for (const p of parts) {
          if (p.startsWith('+')) {
            if (!cell.includes(p.slice(1))) return false;
          } else if (p.startsWith('-')) {
            if (cell.includes(p.slice(1))) return false;
          } else {
            if (!cell.includes(p)) return false;
          }
        }
      }
      return true;
    }

    function highlightText(text, colIndex){
      const f = filters[colIndex];
      if (!f) return text;
      let result = text;
      const parts = f.split(/\s+/).filter(Boolean).filter(p => !p.startsWith('-'));
      for (const p of parts) {
        const term = p.startsWith('+') ? p.slice(1) : p;
        if (!term) continue;
        const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        result = result.replace(regex, '<mark>$1</mark>');
      }
      return result;
    }

    function renderTable(){
      const matchedRows = [];
      for (const row of data) {
        if (rowMatches(row)) matchedRows.push(row);
      }

      const matched = matchedRows.length;
      const activeFilters = filters.some(f => f.trim() !== '');
      const renderLimit = (activeFilters && matched > DEFAULT_RENDER_LIMIT) ? matched : DEFAULT_RENDER_LIMIT;

      const frag = document.createDocumentFragment();
      for (const row of matchedRows.slice(0, renderLimit)) {
        const tr = document.createElement('tr');
        for (let c=0;c<7;c++){
          const td = document.createElement('td');
          td.innerHTML = highlightText(String(row[c]), c);
          tr.appendChild(td);
        }
        frag.appendChild(tr);
      }

      tbody.innerHTML = '';
      tbody.appendChild(frag);
      statusEl.textContent = `Coincidencias: ${matched.toLocaleString()} ‚Äî Mostrando: ${Math.min(matched, renderLimit).toLocaleString()}${matched>renderLimit?' (limitado por rendimiento)':''}`;
    }

    function updateDatalist(colIndex, typed){
      const dl = document.getElementById('dl'+colIndex);
      dl.innerHTML = '';

      // Generar lista din√°mica seg√∫n el filtrado actual excluyendo la columna activa
      const subset = new Set();
      for (const row of data){
        if (rowMatches(row, colIndex)){
          subset.add(String(row[colIndex]));
        }
      }

      const options = Array.from(subset).sort();
      const t = (typed||'').toLowerCase();
      let count = 0;
      for (const v of options){
        if (!typed || v.toLowerCase().includes(t)){
          const opt = document.createElement('option');
          opt.value = v;
          dl.appendChild(opt);
          if (++count >= MAX_SUGGESTIONS) break;
        }
      }
    }

    function clearAllFilters(){
      for (let i=0;i<7;i++){
        filters[i] = '';
        inputs[i].value = '';
        inputs[i].classList.remove('active');
        document.getElementById('dl'+i).innerHTML = '';
      }
      renderTable();
    }

    renderTable();

    // ===== Autocierre datalist =====
    function closeDatalist(el) {
      const listId = el.getAttribute('list');
      el.blur();
      el.setAttribute('list','');
      setTimeout(() => {
        el.setAttribute('list', listId);
        el.focus();
        el.select();
      }, 0);
    }
    function isExactOption(el, colIndex) {
      const v = (el.value || '').trim();
      if (!v) return false;
      const subset = new Set();
      for (const row of data){
        if (rowMatches(row, colIndex)){
          subset.add(String(row[colIndex]));
        }
      }
      return subset.has(v);
    }
    inputs.forEach((inp, i) => {
      inp.addEventListener('change', e => {
        handleType(i, e.target);
        closeDatalist(e.target);
      });
      inp.addEventListener('keydown', e => {
        if (e.key === 'Enter') { handleType(i, e.target); closeDatalist(e.target); }
        else if (e.key === 'Tab' || e.key === 'Escape') { closeDatalist(e.target); }
      });
      inp.addEventListener('input', e => {
        handleType(i, e.target);
        if (isExactOption(e.target, i)) { closeDatalist(e.target); }
      });
    });
  </script>
</body>
</html>